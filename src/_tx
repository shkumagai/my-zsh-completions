#compdef tx

(( $+functions[_resources] )) ||
_resources () {
  local expl
  _wanted resources expl 'resource' _path_files -W "(translations)"
}

(( $+functions[_tx_get_languages_with_cache] )) ||
_tx_get_languages_with_cache () {
  local cache_policy
  zstyle -s ":completion:${curcontext}:" cache-policy cache_policy
  if [[ -z "$cache_policy" ]]; then
    zstyle ":completion:${curcontext}:" cache-policy _tx_langs_caching_policy
  fi

  typeset -g -a _tx_langs
  local expl

  if ( (( #_tx_langs == 0 )) || _cache_invalid txlangs ) \
       && ! _retrieve_cache txlangs; then
    local _u _p
    _u=($(command grep username ${HOME}/.transifexrc | sed 's/^.* //g'))
    _p=($(command grep password ${HOME}/.transifexrc | sed 's/^.* //g'))
    _tx_langs=(${${(f)"$(
      command curl -i -L \
                   --user ${_u}:${_p} \
                   -X GET https://www.transifex.com/api/2/languages/ 2> /dev/null \
      | command grep code \
      | command sed 's/^.*: \"//g')"}/\", /})
    _store_cache txlangs _tx_langs
  fi
  languages=(${_tx_langs})
}

(( $+functions[_tx_get_languages_without_cache] )) ||
_tx_get_languages_without_cache () {
  local expl

  languages=(${${LANG%%.*?}} ${${LANG%%.*?}%%_*?})
}

(( $+functions[_tx_langs_caching_policy] )) ||
_tx_langs_caching_policy () {
  local -a oldp
  oldp=( "$1"(Nmw+1) )
  (( $#oldp ))
}

(( $+functions[_languages] )) ||
_languages () {
  if zstyle -t ":completion:${curcontext}:" use-cache; then
    _tx_get_languages_with_cache
  else
    _tx_get_languages_without_cache
  fi

  # print "languages=$languages"
  _describe -t languages 'tx available languages' languages
}

_tx () {
  local state context line
  typeset -A opt_args

  typeset -a _tx_subcommand
  _tx_subcommand=(
    "delete:Delete an accessible resource or translation in a remote server."
    "help:List all available commands"
    "init:Initialize a new transifex project."
    "pull:Pull files from remote server to local repository"
    "push:Push local files to remote server"
    "set:Add local or remote files under transifex"
    "status:Print status of current project"
  )

  _arguments -s \
    '(--debug -d)'{--debug,-d}'[enable debug messages]' \
    '(--quiet -q)'{--quiet,-q}"[don't print status messages to stdout]" \
    '(--root -r)'{--root,-r}'=[change root directory (default is cwd)]' \
    --traceback'[print full traceback on exceptions]' \
    --disable-colors'[disable colors in the output of commands]' \
    '*::tx-commands:->subcommands'

  if [[ "$state" == "subcommands" ]]; then
    # print "words=${(qqq)^^words[@]}"
    # print "CURRENT=$CURRENT"

    if (( CURRENT == 1 )); then
      _describe -t tx-subcmd "tx subcommands" _tx_subcommand
    else
      local -a opts
      opts=(
        '(-h --help)'{-h,--help}'[show this help message and exit]'
      )

      case "$words[1]" in
        init)
          opts+=(
            '--host=[Specify a default Transifex host.]:URL:_urls'
            '--user=[Specify username for Transifex server.]'
            '--pass=[Specify password for Transifex server.]'
          )
          ;;

        delete)
          opts+=(
            '(-r --resource)'{-r,--resource}'=[Specify the resource you want to delete (defaults to all)]:resource:_resources'
            '(-l --language)'{-l,--language}'=[Specify the translation you want to delete]:lang:_languages'
            '(-f --force)'{-f,--force}'[Delete an entity forcefully.]'
            "--skip[Don't stop on errors.]"
          )
          ;;

        pull)
          opts+=(
            '(-r --resource)'{-r,--resource}'=[Specify the resource for which you want to pull the translations (defaults to all)]:resource:_resources'
            '(-l --language)'{-l,--language}'=[Specify which translations you want to pull (defaults to all)]:lang:_languages'
            '(-f --force)'{-f,--force}'[Force download of translations files.]'
            "--skip[Don't stop on errors. Useful when pushing many files concurrently.]"
            '(-a --all)'{-a,--all}'[Fetch all translation files from server (even new ones)]'
            '(-s --source)'{-s,--source}'[Force the fetching of the source file (default: False)]'
            '--disable-overwrite[Use this flag if you want to disable to fetch new translations files and replace existing ones]'
            '--minimun-prec=[Specify the minimum acceptable percentage of a translation in order to download it.]'
            "--mode=[Specify the mode of the translation file to pull (e.g. 'reviewed').]:mode"
          )
          ;;
        push)
          opts+=(
            '(-r --resource)'{-r,--resource}'=[Specify the resource for which you want to push the translations (defaults to all)]:resource:_resources'
            '(-l --language)'{-l,--language}'=[Specify which translations you want to push (defaults to all)]:lang:_languages'
            '(-f --force)'{-f,--force}'[Push source files without checking modification times.]'
            "--skip[Don't stop on errors. Useful when pushing many files concurrently.]"
            '(-s --source)'{-s,--source}'[Push the source file to the server.]'
            '(-t --translations)'{-t,--translations}'[Push the translation files to the server]'
            "--no-interactive[Don't require user input when forcing a push.]"
          )
          ;;
        set)
          opts+=(
            '(-r --resource)'{-r,--resource}"=[Specify the slug of the resource that you're setting up.]:resource:_resources"
            "(-l --language --auto-local --auto-remote)--language=:[Specify which translations you want to pull.]:lang:_languages"
            "(-l --language --auto-local --auto-remote)-l=:[Specify which translations you want to pull.]:lang:_languages"
            '(-l --language --auto-local --auto-remote)--auto-local[Used when auto configuring local project.]'
            '(-l --language --auto-local --auto-remote)--auto-remote[Used when adding remote files from Transifex server.]:url:_urls'
            "--source[Specify that the given file is a source file (doesn't work with the --auto-* commands).]"
            '--minimun-prec=[Specify the minimum acceptable percentage of a translation in order to download it.]'
            "--mode=[Specify the mode of the translation file to pull (e.g. 'reviewed').]:mode"
            '(-t --type)'{-t,--type}'[Specify the i18n type of the resource(s). This is only needed, if the resource(s) does not exist yet in Transifex.]'
            '(-s --source-language)'{-s,--source-language}'=[Specify the source language of a resource (requires --auto-local).]:lang:_languages'
            '(-f --source-file)'{-f,--source-file}'=[Specify the source file of a resource (requires --auto-local).]:file:_files'
            '--execute[Execute commands (requires --auto-local).]'
          )
          ;;
        status)
          opts+=(
            '(-r --resource)'{-r,--resource}'[Speficy the resource]:resource:_resources'
          )
          ;;
      esac
      # print "opts=${(qqq)opts}"
      _arguments -s $opts
    fi
  fi
}

_tx "$@"

# Local variables:
# mode: shell-script
# sh-basic-offset: 2
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: sw=2 ts=2 et filetype=sh
